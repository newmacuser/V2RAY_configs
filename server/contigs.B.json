{  
  "reverse":{  //这是 B 的反向代理设置，必须有下面的 portals 对象
    "portals":[  
      {  
        "tag":"portal",
        "domain":"www.ytm1234.com"        // 必须和上面 A 设定的域名一样
      }
    ]
  },
  "inbounds":[
    {  
      // 接受 C 的inbound
      "tag":"tunnel", // 标签，路由中用到
      "port": 12469,
      "protocol": "vmess",
      "settings": {
        "clients": [
          {
            "id": "dcc9f9bf-5f5f-4004-ae9f-f9e118e41731",
            "level": 1,
            "alterId": 64
          }
        ]
      },
      "streamSettings": {
      "network": "mkcp",
      "kcpSettings": {
            "mtu": 1350,
            "tti": 10,
            "uplinkCapacity": 100,
            "downlinkCapacity": 100,
            "congestion": true,
            "header": {
              "type": "wechat-video"
        }
          }
        }
    },
    // 另一个 inbound，接受 A 主动发起的请求  
    {  
      "tag": "interconn",// 标签，路由中用到
      "port":16823,
      "protocol":"vmess",
      "settings":{  
        "clients":[  
          {  
            "id":"60a02eae-1ebf-4ac8-a762-362c8969b130",
            "alterId":64
          }
        ]
      }
    }
  ],
  "routing":{   
    "rules":[  
      {  //路由规则，接收 C 的请求后发给 A
        "type":"field",
        "inboundTag":[  
          "external"
        ],
        "outboundTag":"portal"
      },
      {  //路由规则，让 B 能够识别这是 A 主动发起的反向代理连接
        "type":"field",
        "inboundTag":[  
          "tunnel"
        ],
        "domain":[  
          "full:www.ytm1234.com"
        ],
        "outboundTag":"portal"
      },
      { //kcp
	"type":"field",
	"inboundTag":[
	 "kcp"
	],
	"outboundTag":"direct"
      }
    ]
  }
}

